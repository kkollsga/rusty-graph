name: Build and Publish Python Wheels
on:
  push:
    paths:
      - 'Cargo.toml'
  workflow_dispatch: # Allow manual triggering
jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Install Maturin
        run: pip install maturin
      - name: Extract version from Cargo.toml
        id: get_version
        run: |
          $version = (Select-String -Path "Cargo.toml" -Pattern '^\s*version\s*=\s*"([^"]+)"').Matches.Groups[1].Value
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "Package version: $version"
        shell: pwsh
      - name: Build wheels
        run: |
          if (!(Test-Path -Path "wheels")) { New-Item -ItemType Directory -Path "wheels" }
          maturin build --release --target ${{ matrix.target }} --out wheels
        shell: pwsh
      - name: List build directory
        run: Get-ChildItem -Recurse wheels
        shell: pwsh
      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheels/*.whl
  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Extract version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep -m 1 "version" Cargo.toml | cut -d '"' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Package version: $VERSION"
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Display structure of downloaded files
        run: find dist -type f
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          # Uncomment to test on TestPyPI first
          # repository_url: https://test.pypi.org/legacy/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.whl
          generate_release_notes: true
          tag_name: v${{ env.VERSION }}
          token: ${{ secrets.RELEASE_TOKEN }}